package dismock

import (
    "net/http"
    "net/url"

    "github.com/diamondburned/arikawa/v3/api"
    "github.com/diamondburned/arikawa/v3/discord"
    "github.com/gorilla/schema"
    "github.com/stretchr/testify/assert"

    "github.com/mavolin/dismock/v3/internal/check"
    "github.com/mavolin/dismock/v3/internal/testing"
)

// Code generated by tools/codegen/mock. DO NOT EDIT.
{{range $file := . }}
// =============================================================================
// {{.Name}}
// =====================================================================================
{{range $action := .Actions}}
// {{.Name}} mocks api.Client.{{.Name}}.
func (m *Mocker) {{.Name}}(
    {{- range $i, $param := .Params}}
        {{- if gt $i 0}}, {{end}} {{- $param.Name}} {{$param.Type.String}}
    {{- end -}}
) {
{{- if .ReturnType}}{{if gt .ReturnType.Slice 0 | or .ReturnType.Variadic}}
    if _ret == nil {
        _ret = {{.ReturnType.String}}{}
    }
{{end}}{{end}}
    m.MockAPI("{{.Name}}", {{.HTTPMethod.AsHTTPVar}}, {{.EndpointExpr}},
{{- if or .JSONParam .QueryParam .ReasonParam .URLParams .Multipart .JSONBody .ReturnType | not}}
    {{- print " nil)"}}
{{- else}}
        func(_w http.ResponseWriter, _r *http.Request, _t testing.TInterface) {
    {{- if .Multipart}}
            if {{.JSONParam}}.NeedsMultipart() {
                _files := {{.JSONParam}}.Files
                {{.JSONParam}}.Files = nil
                check.Multipart(_t, _r.Body, _r.Header, {{.JSONParam}}, _files)
            } else {
                check.JSON(_t, {{.JSONParam}}, _r.Body)
            }{{println}}
    {{- else if .JSONParam}}
            check.JSON(_t, {{.JSONParam}}, _r.Body){{println}}
    {{- end}}{{if .QueryParam}}
            var _values url.Values
            err := schema.NewEncoder().Encode({{.QueryParam}}, _values)
            assert.NoError(_t, err)

            check.Query(_t, _values, _r.URL.Query()){{println}}
    {{- end}}{{if .ReasonParam}}
            check.Header(_t, {{.ReasonParam}}, _r.Header){{println}}
    {{- end}}{{if .URLParams}}
            {{- println}}{{template "url_params.tmpl" .URLParams}}{{println}}
    {{- end}}{{if .JSONBody}}
            {{- println}}{{template "json_body.tmpl" .JSONBody}}{{println}}
    {{- end}}{{if .WrappedResponseField}}
            {{- println}}{{template "wrapped_response.tmpl" .}}{{println}}
    {{- else if .ReturnType}}
            check.WriteJSON(_t, _w, _ret){{println}}
    {{- end}}
        {{- indent 2 "})"}}
{{- end}}
}
{{end}}
{{- end}}
